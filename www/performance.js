(()=>{var e={819:(e,t,r)=>{"use strict";function n(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[V]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);return!t||t===Object.prototype}(e)||Array.isArray(e)||!!e[z]||!!e.constructor[z]||l(e)||d(e))}function u(e,t,r){void 0===r&&(r=!1),0===a(e)?(r?Object.keys:q)(e).forEach((function(n){r&&"symbol"==typeof n||t(n,e[n],e)})):e.forEach((function(r,n){return t(n,r,e)}))}function a(e){var t=e[V];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:l(e)?2:d(e)?3:0}function c(e,t){return 2===a(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t,r){var n=a(e);2===n?e.set(t,r):3===n?(e.delete(t),e.add(r)):e[t]=r}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function l(e){return W&&e instanceof Map}function d(e){return F&&e instanceof Set}function p(e){return e.o||e.t}function h(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=K(e);delete t[V];for(var r=q(t),n=0;n<r.length;n++){var o=r[n],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function y(e,t){return void 0===t&&(t=!1),v(e)||o(e)||!i(e)||(a(e)>1&&(e.set=e.add=e.clear=e.delete=b),Object.freeze(e),t&&u(e,(function(e,t){return y(t,!0)}),!0)),e}function b(){n(2)}function v(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function g(e){var t=J[e];return t||n(18,e),t}function m(){return U}function w(e,t){t&&(g("Patches"),e.u=[],e.s=[],e.v=t)}function O(e){A(e),e.p.forEach(j),e.p=null}function A(e){e===U&&(U=e.l)}function S(e){return U={p:[],l:U,h:e,m:!0,_:0}}function j(e){var t=e[V];0===t.i||1===t.i?t.j():t.g=!0}function E(e,t){t._=t.p.length;var r=t.p[0],o=void 0!==e&&e!==r;return t.h.O||g("ES5").S(t,e,o),o?(r[V].P&&(O(t),n(4)),i(e)&&(e=_(t,e),t.l||k(t,e)),t.u&&g("Patches").M(r[V],e,t.u,t.s)):e=_(t,r,[]),O(t),t.u&&t.v(t.u,t.s),e!==L?e:void 0}function _(e,t,r){if(v(t))return t;var n=t[V];if(!n)return u(t,(function(o,i){return P(e,n,t,o,i,r)}),!0),t;if(n.A!==e)return t;if(!n.P)return k(e,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var o=4===n.i||5===n.i?n.o=h(n.k):n.o;u(3===n.i?new Set(o):o,(function(t,i){return P(e,n,o,t,i,r)})),k(e,o,!1),r&&e.u&&g("Patches").R(n,r,e.u,e.s)}return n.o}function P(e,t,r,n,u,a){if(o(u)){var f=_(e,u,a&&t&&3!==t.i&&!c(t.D,n)?a.concat(n):void 0);if(s(r,n,f),!o(f))return;e.m=!1}if(i(u)&&!v(u)){if(!e.h.N&&e._<1)return;_(e,u),t&&t.A.l||k(e,u)}}function k(e,t,r){void 0===r&&(r=!1),e.h.N&&e.m&&y(t,r)}function x(e,t){var r=e[V];return(r?p(r):e)[t]}function T(e,t){if(t in e)for(var r=Object.getPrototypeOf(e);r;){var n=Object.getOwnPropertyDescriptor(r,t);if(n)return n;r=Object.getPrototypeOf(r)}}function C(e){e.P||(e.P=!0,e.l&&C(e.l))}function M(e){e.o||(e.o=h(e.t))}function D(e,t,r){var n=l(t)?g("MapSet").T(t,r):d(t)?g("MapSet").F(t,r):e.O?function(e,t){var r=Array.isArray(e),n={i:r?1:0,A:t?t.A:m(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=n,i=$;r&&(o=[n],i=X);var u=Proxy.revocable(o,i),a=u.revoke,c=u.proxy;return n.k=c,n.j=a,c}(t,r):g("ES5").J(t,r);return(r?r.A:m()).p.push(n),n}function I(e){return o(e)||n(22,e),function e(t){if(!i(t))return t;var r,n=t[V],o=a(t);if(n){if(!n.P&&(n.i<4||!g("ES5").K(n)))return n.t;n.I=!0,r=R(t,o),n.I=!1}else r=R(t,o);return u(r,(function(t,o){n&&function(e,t){return 2===a(e)?e.get(t):e[t]}(n.t,t)===o||s(r,t,e(o))})),3===o?new Set(r):r}(e)}function R(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return h(e)}r.r(t),r.d(t,{MiddlewareArray:()=>Pe,__DO_NOT_USE__ActionTypes:()=>te,applyMiddleware:()=>de,bindActionCreators:()=>ae,combineReducers:()=>ie,compose:()=>le,configureStore:()=>Ie,createAction:()=>Re,createAsyncThunk:()=>Xe,createDraftSafeSelector:()=>ge,createEntityAdapter:()=>Ve,createImmutableStateInvariantMiddleware:()=>xe,createNextState:()=>G,createReducer:()=>We,createSelector:()=>be,createSerializableStateInvariantMiddleware:()=>Me,createSlice:()=>Fe,createStore:()=>ne,current:()=>I,findNonSerializableValue:()=>Ce,freeze:()=>y,getDefaultMiddleware:()=>De,getType:()=>Ue,isAllOf:()=>Qe,isAnyOf:()=>Ge,isAsyncThunkAction:()=>ut,isFulfilled:()=>it,isImmutableDefault:()=>ke,isPending:()=>rt,isPlain:()=>Te,isPlainObject:()=>_e,isRejected:()=>nt,isRejectedWithValue:()=>ot,nanoid:()=>qe,unwrapResult:()=>Ze});var N,U,B="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),W="undefined"!=typeof Map,F="undefined"!=typeof Set,H="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,L=B?Symbol.for("immer-nothing"):((N={})["immer-nothing"]=!0,N),z=B?Symbol.for("immer-draftable"):"__$immer_draftable",V=B?Symbol.for("immer-state"):"__$immer_state",q=("undefined"!=typeof Symbol&&Symbol.iterator,"undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames),K=Object.getOwnPropertyDescriptors||function(e){var t={};return q(e).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(e,r)})),t},J={},$={get:function(e,t){if(t===V)return e;var r=p(e);if(!c(r,t))return function(e,t,r){var n,o=T(t,r);return o?"value"in o?o.value:null===(n=o.get)||void 0===n?void 0:n.call(e.k):void 0}(e,r,t);var n=r[t];return e.I||!i(n)?n:n===x(e.t,t)?(M(e),e.o[t]=D(e.A.h,n,e)):n},has:function(e,t){return t in p(e)},ownKeys:function(e){return Reflect.ownKeys(p(e))},set:function(e,t,r){var n=T(p(e),t);if(null==n?void 0:n.set)return n.set.call(e.k,r),!0;if(!e.P){var o=x(p(e),t),i=null==o?void 0:o[V];if(i&&i.t===r)return e.o[t]=r,e.D[t]=!1,!0;if(f(r,o)&&(void 0!==r||c(e.t,t)))return!0;M(e),C(e)}return e.o[t]=r,e.D[t]=!0,!0},deleteProperty:function(e,t){return void 0!==x(e.t,t)||t in e.t?(e.D[t]=!1,M(e),C(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var r=p(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:n.enumerable,value:r[t]}:n},defineProperty:function(){n(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){n(12)}},X={};u($,(function(e,t){X[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),X.deleteProperty=function(e,t){return $.deleteProperty.call(this,e[0],t)},X.set=function(e,t,r){return $.set.call(this,e[0],t,r,e[0])};var Z=new(function(){function e(e){this.O=H,this.N=!0,"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze),this.produce=this.produce.bind(this),this.produceWithPatches=this.produceWithPatches.bind(this)}var t=e.prototype;return t.produce=function(e,t,r){if("function"==typeof e&&"function"!=typeof t){var o=t;t=e;var u=this;return function(e){var r=this;void 0===e&&(e=o);for(var n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];return u.produce(e,(function(e){var n;return(n=t).call.apply(n,[r,e].concat(i))}))}}var a;if("function"!=typeof t&&n(6),void 0!==r&&"function"!=typeof r&&n(7),i(e)){var c=S(this),s=D(this,e,void 0),f=!0;try{a=t(s),f=!1}finally{f?O(c):A(c)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return w(c,r),E(e,c)}),(function(e){throw O(c),e})):(w(c,r),E(a,c))}if(!e||"object"!=typeof e){if((a=t(e))===L)return;return void 0===a&&(a=e),this.N&&y(a,!0),a}n(21,e)},t.produceWithPatches=function(e,t){var r,n,o=this;return"function"==typeof e?function(t){for(var r=arguments.length,n=Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return o.produceWithPatches(t,(function(t){return e.apply(void 0,[t].concat(n))}))}:[this.produce(e,t,(function(e,t){r=e,n=t})),r,n]},t.createDraft=function(e){i(e)||n(8),o(e)&&(e=I(e));var t=S(this),r=D(this,e,void 0);return r[V].C=!0,A(t),r},t.finishDraft=function(e,t){var r=(e&&e[V]).A;return w(r,t),E(void 0,r)},t.setAutoFreeze=function(e){this.N=e},t.setUseProxies=function(e){e&&!H&&n(20),this.O=e},t.applyPatches=function(e,t){var r;for(r=t.length-1;r>=0;r--){var n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}var i=g("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t.slice(r+1))}))},e}()),Y=Z.produce;Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z);const G=Y;var Q=r(121),ee=function(){return Math.random().toString(36).substring(7).split("").join(".")},te={INIT:"@@redux/INIT"+ee(),REPLACE:"@@redux/REPLACE"+ee(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ee()}};function re(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function ne(e,t,r){var n;if("function"==typeof t&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===r&&(r=t,t=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(ne)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,i=t,u=[],a=u,c=!1;function s(){a===u&&(a=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return i}function l(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return s(),a.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,s();var r=a.indexOf(e);a.splice(r,1),u=null}}}function d(e){if(!re(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,i=o(i,e)}finally{c=!1}for(var t=u=a,r=0;r<t.length;r++)(0,t[r])();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,d({type:te.REPLACE})}function h(){var e,t=l;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function r(){e.next&&e.next(f())}return r(),{unsubscribe:t(r)}}})[Q.Z]=function(){return this},e}return d({type:te.INIT}),(n={dispatch:d,subscribe:l,getState:f,replaceReducer:p})[Q.Z]=h,n}function oe(e,t){var r=t&&t.type;return"Given "+(r&&'action "'+String(r)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function ie(e){for(var t=Object.keys(e),r={},n=0;n<t.length;n++){var o=t[n];"function"==typeof e[o]&&(r[o]=e[o])}var i,u=Object.keys(r);try{!function(e){Object.keys(e).forEach((function(t){var r=e[t];if(void 0===r(void 0,{type:te.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===r(void 0,{type:te.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+te.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(r)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var n=!1,o={},a=0;a<u.length;a++){var c=u[a],s=r[c],f=e[c],l=s(f,t);if(void 0===l){var d=oe(c,t);throw new Error(d)}o[c]=l,n=n||l!==f}return(n=n||u.length!==Object.keys(e).length)?o:e}}function ue(e,t){return function(){return t(e.apply(this,arguments))}}function ae(e,t){if("function"==typeof e)return ue(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var r={};for(var n in e){var o=e[n];"function"==typeof o&&(r[n]=ue(o,t))}return r}function ce(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function se(e,t){var r=Object.keys(e);return Object.getOwnPropertySymbols&&r.push.apply(r,Object.getOwnPropertySymbols(e)),t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r}function fe(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?se(r,!0).forEach((function(t){ce(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):se(r).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function le(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function de(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return function(){var r=e.apply(void 0,arguments),n=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:r.getState,dispatch:function(){return n.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return fe({},r,{dispatch:n=le.apply(void 0,i)(r.dispatch)})}}}function pe(e,t){return e===t}function he(e,t,r){if(null===t||null===r||t.length!==r.length)return!1;for(var n=t.length,o=0;o<n;o++)if(!e(t[o],r[o]))return!1;return!0}function ye(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var r=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+r+"]")}return t}var be=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return function(){for(var t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];var i=0,u=n.pop(),a=ye(n),c=e.apply(void 0,[function(){return i++,u.apply(null,arguments)}].concat(r)),s=e((function(){for(var e=[],t=a.length,r=0;r<t;r++)e.push(a[r].apply(null,arguments));return c.apply(null,e)}));return s.resultFunc=u,s.dependencies=a,s.recomputations=function(){return i},s.resetRecomputations=function(){return i=0},s}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:pe,r=null,n=null;return function(){return he(t,r,arguments)||(n=e.apply(null,arguments)),r=arguments,n}})),ve=r(894),ge=function(){var e=be.apply(void 0,arguments),t=function(t){for(var r=arguments.length,n=new Array(r>1?r-1:0),i=1;i<r;i++)n[i-1]=arguments[i];return e.apply(void 0,[o(t)?I(t):t].concat(n))};return t};function me(){return(me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function we(e){return(we=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Oe(e,t){return(Oe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ae(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Se(e,t,r){return(Se=Ae()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var o=new(Function.bind.apply(e,n));return r&&Oe(o,r.prototype),o}).apply(null,arguments)}function je(e){var t="function"==typeof Map?new Map:void 0;return(je=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return Se(e,arguments,we(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),Oe(n,e)})(e)}var Ee="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?le:le.apply(null,arguments)};function _e(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}var Pe=function(e){var t,r;function n(){return e.apply(this,arguments)||this}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var o=n.prototype;return o.concat=function(){for(var t,r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Se(n,(t=e.prototype.concat).call.apply(t,[this].concat(o)))},o.prepend=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 1===t.length&&Array.isArray(t[0])?Se(n,t[0].concat(this)):Se(n,t.concat(this))},n}(je(Array));function ke(e){return"object"!=typeof e||null==e}function xe(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Te(e){return null==e||"string"==typeof e||"boolean"==typeof e||"number"==typeof e||Array.isArray(e)||_e(e)}function Ce(e,t,r,n,o){var i;if(void 0===t&&(t=[]),void 0===r&&(r=Te),void 0===o&&(o=[]),!r(e))return{keyPath:t.join(".")||"<root>",value:e};if("object"!=typeof e||null===e)return!1;var u=null!=n?n(e):Object.entries(e),a=o.length>0,c=u,s=Array.isArray(c),f=0;for(c=s?c:c[Symbol.iterator]();;){var l;if(s){if(f>=c.length)break;l=c[f++]}else{if((f=c.next()).done)break;l=f.value}var d=l,p=d[0],h=d[1],y=t.concat(p);if(!(a&&o.indexOf(y.join("."))>=0)){if(!r(h))return{keyPath:y.join("."),value:h};if("object"==typeof h&&(i=Ce(h,y,r,n,o)))return i}}return!1}function Me(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function De(e){void 0===e&&(e={});var t=e,r=t.thunk,n=void 0===r||r,o=(t.immutableCheck,t.serializableCheck,new Pe);return n&&(function(e){return"boolean"==typeof e}(n)?o.push(ve.default):o.push(ve.default.withExtraArgument(n.extraArgument))),o}function Ie(e){var t,r=function(e){return De(e)},n=e||{},o=n.reducer,i=void 0===o?void 0:o,u=n.middleware,a=void 0===u?r():u,c=n.devTools,s=void 0===c||c,f=n.preloadedState,l=void 0===f?void 0:f,d=n.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!_e(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=ie(i)}var h=de.apply(void 0,"function"==typeof a?a(r):a),y=le;s&&(y=Ee(me({trace:!1},"object"==typeof s&&s)));var b=[h];return Array.isArray(p)?b=[h].concat(p):"function"==typeof p&&(b=p(b)),ne(t,l,y.apply(void 0,b))}function Re(e,t){function r(){if(t){var r=t.apply(void 0,arguments);if(!r)throw new Error("prepareAction did not return an object");return me({type:e,payload:r.payload},"meta"in r&&{meta:r.meta},{},"error"in r&&{error:r.error})}return{type:e,payload:arguments.length<=0?void 0:arguments[0]}}return r.toString=function(){return""+e},r.type=e,r.match=function(t){return t.type===e},r}function Ne(e){return["type","payload","error","meta"].indexOf(e)>-1}function Ue(e){return""+e}function Be(e){var t,r={},n=[],o={addCase:function(e,t){var n="string"==typeof e?e:e.type;if(n in r)throw new Error("addCase cannot be called with two reducers for the same action type");return r[n]=t,o},addMatcher:function(e,t){return n.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[r,n,t]}function We(e,t,r,n){void 0===r&&(r=[]);var u="function"==typeof t?Be(t):[t,r,n],a=u[0],c=u[1],s=u[2];return function(t,r){void 0===t&&(t=e);var n=[a[r.type]].concat(c.filter((function(e){return(0,e.matcher)(r)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[s]),n.reduce((function(e,t){if(t){if(o(e)){var n=t(e,r);return void 0===n?e:n}if(i(e))return G(e,(function(e){return t(e,r)}));var u=t(e,r);if(void 0===u){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return u}return e}),t)}}function Fe(e){var t=e.name,r=e.initialState;if(!t)throw new Error("`name` is a required option for createSlice");var n=e.reducers||{},o=void 0===e.extraReducers?[]:"function"==typeof e.extraReducers?Be(e.extraReducers):[e.extraReducers],i=o[0],u=void 0===i?{}:i,a=o[1],c=void 0===a?[]:a,s=o[2],f=void 0===s?void 0:s,l=Object.keys(n),d={},p={},h={};l.forEach((function(e){var r,o,i=n[e],u=t+"/"+e;"reducer"in i?(r=i.reducer,o=i.prepare):r=i,d[e]=r,p[u]=r,h[e]=o?Re(u,o):Re(u)}));var y=We(r,me({},u,{},p),c,f);return{name:t,reducer:y,actions:h,caseReducers:d}}function He(e){return function(t,r){var n=function(t){!function(e){return _e(t=e)&&"string"==typeof t.type&&Object.keys(t).every(Ne);var t}(r)?e(r,t):e(r.payload,t)};return o(t)?(n(t),t):G(t,n)}}function Le(e,t){return t(e)}function ze(e){function t(t,r){var n=Le(t,e);n in r.entities||(r.ids.push(n),r.entities[n]=t)}function r(e,r){Array.isArray(e)||(e=Object.values(e));var n=e,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var u;if(o){if(i>=n.length)break;u=n[i++]}else{if((i=n.next()).done)break;u=i.value}t(u,r)}}function n(e,t){var r=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],r=!0)})),r&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function o(t,r){var n={},o={};t.forEach((function(e){e.id in r.entities&&(o[e.id]={id:e.id,changes:me({},o[e.id]?o[e.id].changes:null,{},e.changes)})})),(t=Object.values(o)).length>0&&t.filter((function(t){return function(t,r,n){var o=n.entities[r.id],i=Object.assign({},o,r.changes),u=Le(i,e),a=u!==r.id;return a&&(t[r.id]=u,delete n.entities[r.id]),n.entities[u]=i,a}(n,t,r)})).length>0&&(r.ids=r.ids.map((function(e){return n[e]||e})))}function i(t,n){Array.isArray(t)||(t=Object.values(t));var i=[],u=[],a=t,c=Array.isArray(a),s=0;for(a=c?a:a[Symbol.iterator]();;){var f;if(c){if(s>=a.length)break;f=a[s++]}else{if((s=a.next()).done)break;f=s.value}var l=f,d=Le(l,e);d in n.entities?u.push({id:d,changes:l}):i.push(l)}o(u,n),r(i,n)}return{removeAll:(u=function(e){Object.assign(e,{ids:[],entities:{}})},a=He((function(e,t){return u(t)})),function(e){return a(e,void 0)}),addOne:He(t),addMany:He(r),setAll:He((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.ids=[],t.entities={},r(e,t)})),updateOne:He((function(e,t){return o([e],t)})),updateMany:He(o),upsertOne:He((function(e,t){return i([e],t)})),upsertMany:He(i),removeOne:He((function(e,t){return n([e],t)})),removeMany:He(n)};var u,a}function Ve(e){void 0===e&&(e={});var t=me({sortComparer:!1,selectId:function(e){return e.id}},e),r=t.selectId,n=t.sortComparer;return me({selectId:r,sortComparer:n},{getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},{},{getSelectors:function(e){var t=function(e){return e.ids},r=function(e){return e.entities},n=ge(t,r,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},i=function(e,t){return e[t]},u=ge(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:r,selectAll:n,selectTotal:u,selectById:ge(r,o,i)};var a=ge(e,r);return{selectIds:ge(e,t),selectEntities:a,selectAll:ge(e,n),selectTotal:ge(e,u),selectById:ge(a,o,i)}}},{},n?function(e,t){var r=ze(e);function n(t,r){Array.isArray(t)||(t=Object.values(t));var n=t.filter((function(t){return!(Le(t,e)in r.entities)}));0!==n.length&&u(n,r)}function o(t,r){var n=[];t.forEach((function(t){return function(t,r,n){if(!(r.id in n.entities))return!1;var o=n.entities[r.id],i=Object.assign({},o,r.changes),u=Le(i,e);return delete n.entities[r.id],t.push(i),u!==r.id}(n,t,r)})),0!==n.length&&u(n,r)}function i(t,r){Array.isArray(t)||(t=Object.values(t));var i=[],u=[],a=t,c=Array.isArray(a),s=0;for(a=c?a:a[Symbol.iterator]();;){var f;if(c){if(s>=a.length)break;f=a[s++]}else{if((s=a.next()).done)break;f=s.value}var l=f,d=Le(l,e);d in r.entities?u.push({id:d,changes:l}):i.push(l)}o(u,r),n(i,r)}function u(r,n){r.sort(t),r.forEach((function(t){n.entities[e(t)]=t}));var o=Object.values(n.entities);o.sort(t);var i=o.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var r=0;r<e.length&&r<t.length;r++)if(e[r]!==t[r])return!1;return!0})(n.ids,i)||(n.ids=i)}return{removeOne:r.removeOne,removeMany:r.removeMany,removeAll:r.removeAll,addOne:He((function(e,t){return n([e],t)})),updateOne:He((function(e,t){return o([e],t)})),upsertOne:He((function(e,t){return i([e],t)})),setAll:He((function(e,t){Array.isArray(e)||(e=Object.values(e)),t.entities={},t.ids=[],n(e,t)})),addMany:He(n),updateMany:He(o),upsertMany:He(i)}}(r,n):ze(r))}"undefined"!=typeof Symbol&&(Symbol.iterator||(Symbol.iterator=Symbol("Symbol.iterator"))),"undefined"!=typeof Symbol&&(Symbol.asyncIterator||(Symbol.asyncIterator=Symbol("Symbol.asyncIterator")));var qe=function(e){void 0===e&&(e=21);for(var t="",r=e;r--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},Ke=["name","message","stack","code"],Je=function(e){this.payload=e,this.name="RejectWithValue",this.message="Rejected"},$e=function(e){if("object"==typeof e&&null!==e){var t={},r=Ke,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++]}else{if((o=r.next()).done)break;i=o.value}var u=i;"string"==typeof e[u]&&(t[u]=e[u])}return t}return{message:String(e)}};function Xe(e,t,r){var n=Re(e+"/fulfilled",(function(e,t,r){return{payload:e,meta:{arg:r,requestId:t,requestStatus:"fulfilled"}}})),o=Re(e+"/pending",(function(e,t){return{payload:void 0,meta:{arg:t,requestId:e,requestStatus:"pending"}}})),i=Re(e+"/rejected",(function(e,t,n){var o=e instanceof Je,i=!!e&&"AbortError"===e.name,u=!!e&&"ConditionError"===e.name;return{payload:e instanceof Je?e.payload:void 0,error:(r&&r.serializeError||$e)(e||"Rejected"),meta:{arg:n,requestId:t,rejectedWithValue:o,requestStatus:"rejected",aborted:i,condition:u}}})),u="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(a,c,s){var f,l=qe(),d=new u,p=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:f||"Aborted"})}))})),h=!1,y=function(){try{var u,f=function(e){return y?e:(r&&!r.dispatchConditionRejection&&i.match(u)&&u.meta.condition||a(u),u)},y=!1,b=function(f,y){try{var b=function(){if(r&&r.condition&&!1===r.condition(e,{getState:c,extra:s}))throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return h=!0,a(o(l,e)),Promise.resolve(Promise.race([p,Promise.resolve(t(e,{dispatch:a,getState:c,extra:s,requestId:l,signal:d.signal,rejectWithValue:function(e){return new Je(e)}})).then((function(t){return t instanceof Je?i(t,l,e):n(t,l,e)}))])).then((function(e){u=e}))}()}catch(e){return y(e)}return b&&b.then?b.then(void 0,y):b}(0,(function(t){u=i(t,l,e)}));return Promise.resolve(b&&b.then?b.then(f):f(b))}catch(e){return Promise.reject(e)}}();return Object.assign(y,{abort:function(e){h&&(f=e,d.abort())},requestId:l,arg:e})}}),{pending:o,rejected:i,fulfilled:n,typePrefix:e})}function Ze(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var Ye=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function Ge(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.some((function(t){return Ye(t,e)}))}}function Qe(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.every((function(t){return Ye(t,e)}))}}function et(e,t){if(!e||!e.meta)return!1;var r="string"==typeof e.meta.requestId,n=t.indexOf(e.meta.requestStatus)>-1;return r&&n}function tt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function rt(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["pending"])}:tt(t)?function(e){var r=t.map((function(e){return e.pending}));return Ge.apply(void 0,r)(e)}:rt()(t[0])}function nt(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["rejected"])}:tt(t)?function(e){var r=t.map((function(e){return e.rejected}));return Ge.apply(void 0,r)(e)}:nt()(t[0])}function ot(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===t.length||tt(t)?function(e){return Qe(nt.apply(void 0,t),n)(e)}:ot()(t[0])}function it(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["fulfilled"])}:tt(t)?function(e){var r=t.map((function(e){return e.fulfilled}));return Ge.apply(void 0,r)(e)}:it()(t[0])}function ut(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 0===t.length?function(e){return et(e,["pending","fulfilled","rejected"])}:tt(t)?function(e){var r=[],n=t,o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var u;if(o){if(i>=n.length)break;u=n[i++]}else{if((i=n.next()).done)break;u=i.value}var a=u;r.push(a.pending,a.rejected,a.fulfilled)}return Ge.apply(void 0,r)(e)}:ut()(t[0])}!function(){function e(e,t){var r=i[e];return r?r.enumerable=t:i[e]=r={configurable:!0,enumerable:t,get:function(){var t=this[V];return $.get(t,e)},set:function(t){var r=this[V];$.set(r,e,t)}},r}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][V];if(!o.P)switch(o.i){case 5:n(o)&&C(o);break;case 4:r(o)&&C(o)}}}function r(e){for(var t=e.t,r=e.k,n=q(r),o=n.length-1;o>=0;o--){var i=n[o];if(i!==V){var u=t[i];if(void 0===u&&!c(t,i))return!0;var a=r[i],s=a&&a[V];if(s?s.t!==u:!f(a,u))return!0}}var l=!!t[V];return n.length!==q(t).length+(l?0:1)}function n(e){var t=e.k;if(t.length!==e.t.length)return!0;var r=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!r||r.get)}var i={};!function(e,t){J[e]||(J[e]=t)}("ES5",{J:function(t,r){var n=Array.isArray(t),o=function(t,r){if(t){for(var n=Array(r.length),o=0;o<r.length;o++)Object.defineProperty(n,""+o,e(o,!0));return n}var i=K(r);delete i[V];for(var u=q(i),a=0;a<u.length;a++){var c=u[a];i[c]=e(c,t||!!i[c].enumerable)}return Object.create(Object.getPrototypeOf(r),i)}(n,t),i={i:n?5:4,A:r?r.A:m(),P:!1,I:!1,D:{},l:r,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,V,{value:i,writable:!0}),o},S:function(e,r,i){i?o(r)&&r[V].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var r=t[V];if(r){var o=r.t,i=r.k,a=r.D,s=r.i;if(4===s)u(i,(function(t){t!==V&&(void 0!==o[t]||c(o,t)?a[t]||e(i[t]):(a[t]=!0,C(r)))})),u(o,(function(e){void 0!==i[e]||c(i,e)||(a[e]=!1,C(r))}));else if(5===s){if(n(r)&&(C(r),a.length=!0),i.length<o.length)for(var f=i.length;f<o.length;f++)a[f]=!1;else for(var l=o.length;l<i.length;l++)a[l]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)void 0===a[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?r(e):n(e)}})}()},846:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(15),o=r.n(n),i=r(645),u=r.n(i)()(o());u.push([e.id,".container {\r\n  width: 50%;\r\n  border: 2px solid #c4c4c4;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\ttext-align: center;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n}\r\n\r\ntable td{\r\n\tborder: 2px solid black;\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n}","",{version:3,sources:["webpack://./src/assignment/performance/app.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,yBAAyB;EACzB,iBAAiB;EACjB,kBAAkB;CACnB,kBAAkB;EACjB,yCAAyC;AAC3C;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;CACC,uBAAuB;CACvB,WAAW;CACX,aAAa;AACd",sourcesContent:[".container {\r\n  width: 50%;\r\n  border: 2px solid #c4c4c4;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\ttext-align: center;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n}\r\n\r\ntable td{\r\n\tborder: 2px solid black;\r\n\twidth: 100%;\r\n\tpadding: 10px;\r\n}"],sourceRoot:""}]);const a=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var u=this[i][0];null!=u&&(o[u]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);n&&o[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r,n,o=(n=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,o=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(n=(u=a.next()).done)&&(r.push(u.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==a.return||a.return()}finally{if(o)throw i}}return r}}(r,n)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],u=o[3];if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(u)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),s="/*# ".concat(c," */"),f=u.sources.map((function(e){return"/*# sourceURL=".concat(u.sourceRoot||"").concat(e," */")}));return[i].concat(f).concat([s]).join("\n")}return[i].join("\n")}},894:(e,t,r)=>{"use strict";function n(e){return function(t){var r=t.dispatch,n=t.getState;return function(t){return function(o){return"function"==typeof o?o(r,n,e):t(o)}}}}r.r(t),r.d(t,{default:()=>i});var o=n();o.withExtraArgument=n;const i=o},837:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(481),o=r(123),i=r(830),u=r(105),a=r(79),c=function(){function e(e){this._isScalar=!1,e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n=this.operator,i=o.toSubscriber(e,t,r);if(n?i.add(n.call(i,this.source)):i.add(this.source||a.config.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),a.config.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){a.config.useDeprecatedSynchronousErrorHandling&&(e.syncErrorThrown=!0,e.syncErrorValue=t),n.canReportError(e)?e.error(t):console.warn(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=s(t))((function(t,n){var o;o=r.subscribe((function(t){try{e(t)}catch(e){n(e),o&&o.unsubscribe()}}),n,t)}))},e.prototype._subscribe=function(e){var t=this.source;return t&&t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?this:u.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=s(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function s(e){if(e||(e=a.config.Promise||Promise),!e)throw new Error("no Promise impl found");return e}t.Observable=c},556:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(79),o=r(219);t.empty={closed:!0,next:function(e){},error:function(e){if(n.config.useDeprecatedSynchronousErrorHandling)throw e;o.hostReportError(e)},complete:function(){}}},454:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=r(517),u=r(556),a=r(598),c=r(188),s=r(79),f=r(219),l=function(e){function t(r,n,o){var i=e.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,arguments.length){case 0:i.destination=u.empty;break;case 1:if(!r){i.destination=u.empty;break}if("object"==typeof r){r instanceof t?(i.syncErrorThrowable=r.syncErrorThrowable,i.destination=r,r.add(i)):(i.syncErrorThrowable=!0,i.destination=new d(i,r));break}default:i.syncErrorThrowable=!0,i.destination=new d(i,r,n,o)}return i}return o(t,e),t.prototype[c.rxSubscriber]=function(){return this},t.create=function(e,r,n){var o=new t(e,r,n);return o.syncErrorThrowable=!1,o},t.prototype.next=function(e){this.isStopped||this._next(e)},t.prototype.error=function(e){this.isStopped||(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this))},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){this.destination.error(e),this.unsubscribe()},t.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},t.prototype._unsubscribeAndRecycle=function(){var e=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=e,this},t}(a.Subscription);t.Subscriber=l;var d=function(e){function t(t,r,n,o){var a,c=e.call(this)||this;c._parentSubscriber=t;var s=c;return i.isFunction(r)?a=r:r&&(a=r.next,n=r.error,o=r.complete,r!==u.empty&&(s=Object.create(r),i.isFunction(s.unsubscribe)&&c.add(s.unsubscribe.bind(s)),s.unsubscribe=c.unsubscribe.bind(c))),c._context=s,c._next=a,c._error=n,c._complete=o,c}return o(t,e),t.prototype.next=function(e){if(!this.isStopped&&this._next){var t=this._parentSubscriber;s.config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?this.__tryOrSetError(t,this._next,e)&&this.unsubscribe():this.__tryOrUnsub(this._next,e)}},t.prototype.error=function(e){if(!this.isStopped){var t=this._parentSubscriber,r=s.config.useDeprecatedSynchronousErrorHandling;if(this._error)r&&t.syncErrorThrowable?(this.__tryOrSetError(t,this._error,e),this.unsubscribe()):(this.__tryOrUnsub(this._error,e),this.unsubscribe());else if(t.syncErrorThrowable)r?(t.syncErrorValue=e,t.syncErrorThrown=!0):f.hostReportError(e),this.unsubscribe();else{if(this.unsubscribe(),r)throw e;f.hostReportError(e)}}},t.prototype.complete=function(){var e=this;if(!this.isStopped){var t=this._parentSubscriber;if(this._complete){var r=function(){return e._complete.call(e._context)};s.config.useDeprecatedSynchronousErrorHandling&&t.syncErrorThrowable?(this.__tryOrSetError(t,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},t.prototype.__tryOrUnsub=function(e,t){try{e.call(this._context,t)}catch(e){if(this.unsubscribe(),s.config.useDeprecatedSynchronousErrorHandling)throw e;f.hostReportError(e)}},t.prototype.__tryOrSetError=function(e,t,r){if(!s.config.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{t.call(this._context,r)}catch(t){return s.config.useDeprecatedSynchronousErrorHandling?(e.syncErrorValue=t,e.syncErrorThrown=!0,!0):(f.hostReportError(t),!0)}return!1},t.prototype._unsubscribe=function(){var e=this._parentSubscriber;this._context=null,this._parentSubscriber=null,e.unsubscribe()},t}(l);t.SafeSubscriber=d},598:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(835),o=r(399),i=r(517),u=r(305),a=function(){function e(e){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,e&&(this._ctorUnsubscribe=!0,this._unsubscribe=e)}var t;return e.prototype.unsubscribe=function(){var t;if(!this.closed){var r=this,a=r._parentOrParents,s=r._ctorUnsubscribe,f=r._unsubscribe,l=r._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,a instanceof e)a.remove(this);else if(null!==a)for(var d=0;d<a.length;++d)a[d].remove(this);if(i.isFunction(f)){s&&(this._unsubscribe=void 0);try{f.call(this)}catch(e){t=e instanceof u.UnsubscriptionError?c(e.errors):[e]}}if(n.isArray(l)){d=-1;for(var p=l.length;++d<p;){var h=l[d];if(o.isObject(h))try{h.unsubscribe()}catch(e){t=t||[],e instanceof u.UnsubscriptionError?t=t.concat(c(e.errors)):t.push(e)}}}if(t)throw new u.UnsubscriptionError(t)}},e.prototype.add=function(t){var r=t;if(!t)return e.EMPTY;switch(typeof t){case"function":r=new e(t);case"object":if(r===this||r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if(!(r instanceof e)){var n=r;(r=new e)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+t+" added to Subscription.")}var o=r._parentOrParents;if(null===o)r._parentOrParents=this;else if(o instanceof e){if(o===this)return r;r._parentOrParents=[o,this]}else{if(-1!==o.indexOf(this))return r;o.push(this)}var i=this._subscriptions;return null===i?this._subscriptions=[r]:i.push(r),r},e.prototype.remove=function(e){var t=this._subscriptions;if(t){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}},e.EMPTY=((t=new e).closed=!0,t),e}();function c(e){return e.reduce((function(e,t){return e.concat(t instanceof u.UnsubscriptionError?t.errors:t)}),[])}t.Subscription=a},79:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=!1;t.config={Promise:void 0,set useDeprecatedSynchronousErrorHandling(e){if(e){var t=new Error;console.warn("DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n"+t.stack)}else r&&console.log("RxJS: Back to a better error behavior. Thank you. <3");r=e},get useDeprecatedSynchronousErrorHandling(){return r}}},908:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(837),o=r(598);function i(e){var t=e.keys,r=e.index,n=e.subscriber,o=e.subscription,i=e.obj;if(!n.closed)if(r<t.length){var u=t[r];n.next([u,i[u]]),o.add(this.schedule({keys:t,index:r+1,subscriber:n,subscription:o,obj:i}))}else n.complete()}t.pairs=function(e,t){return t?new n.Observable((function(r){var n=Object.keys(e),u=new o.Subscription;return u.add(t.schedule(i,0,{keys:n,index:0,subscriber:r,subscription:u,obj:e})),u})):new n.Observable((function(t){for(var r=Object.keys(e),n=0;n<r.length&&!t.closed;n++){var o=r[n];e.hasOwnProperty(o)&&t.next([o,e[o]])}t.complete()}))},t.dispatch=i},830:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},188:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.rxSubscriber="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),t.$$rxSubscriber=t.rxSubscriber},305:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){return Error.call(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e,this}return e.prototype=Object.create(Error.prototype),e}();t.UnsubscriptionError=r},481:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(454);t.canReportError=function(e){for(;e;){var t=e,r=t.closed,o=t.destination,i=t.isStopped;if(r||i)return!1;e=o&&o instanceof n.Subscriber?o:null}return!0}},219:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hostReportError=function(e){setTimeout((function(){throw e}),0)}},285:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.identity=function(e){return e}},835:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=Array.isArray||function(e){return e&&"number"==typeof e.length}},517:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=function(e){return"function"==typeof e}},399:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=function(e){return null!==e&&"object"==typeof e}},105:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(285);function o(e){return 0===e.length?n.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},123:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(454),o=r(188),i=r(556);t.toSubscriber=function(e,t,r){if(e){if(e instanceof n.Subscriber)return e;if(e[o.rxSubscriber])return e[o.rxSubscriber]()}return e||t||r?new n.Subscriber(e,t,r):new n.Subscriber(i.empty)}},725:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r(379),o=r.n(n),i=r(846);o()(i.Z,{insert:"head",singleton:!1});const u=i.Z.locals||{}},379:(e,t,r)=>{"use strict";var n,o=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),i=[];function u(e){for(var t=-1,r=0;r<i.length;r++)if(i[r].identifier===e){t=r;break}return t}function a(e,t){for(var r={},n=[],o=0;o<e.length;o++){var a=e[o],c=t.base?a[0]+t.base:a[0],s=r[c]||0,f="".concat(c," ").concat(s);r[c]=s+1;var l=u(f),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(i[l].references++,i[l].updater(d)):i.push({identifier:f,updater:y(d,t),references:1}),n.push(f)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var u=o(e.insert||"head");if(!u)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");u.appendChild(t)}return t}var s,f=(s=[],function(e,t){return s[e]=t,s.filter(Boolean).join("\n")});function l(e,t,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),u=e.childNodes;u[t]&&e.removeChild(u[t]),u.length?e.insertBefore(i,u[t]):e.appendChild(i)}}function d(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,h=0;function y(e,t){var r,n,o;if(t.singleton){var i=h++;r=p||(p=c(t)),n=l.bind(null,r,i,!1),o=l.bind(null,r,i,!0)}else r=c(t),n=d.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=a(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var o=u(r[n]);i[o].references--}for(var c=a(e,t),s=0;s<r.length;s++){var f=u(r[s]);0===i[f].references&&(i[f].updater(),i.splice(f,1))}r=c}}}},121:(e,t,r)=>{"use strict";r.d(t,{Z:()=>n}),e=r.hmd(e);const n=function(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r.g?r.g:e)},652:e=>{async function t(e,{method:t,body:r,...n}={}){const o={method:t,...n,headers:{"Content-Type":"application/json",...n.headers}};let i;r&&(o.body=JSON.stringify(r));try{const t=await window.fetch(e,o);if(i=await t.json(),!t.ok)throw new Error(i.statusText);return i}catch(e){return Promise.reject(e.message||i)}}t.get=(e,r={})=>t(e,{method:"GET",...r}),t.post=(e,r,n={})=>t(e,{method:"POST",body:r,...n}),t.put=(e,r,n={})=>t(e,{method:"PUT",body:r,...n}),t.delete=(e,r={})=>t(e,{method:"DELETE",...r}),e.exports={client:t}},514:(e,t,r)=>{const{dispatch:n}=r(908),{fetchWorkersApi:o,taskCancelledApi:i,taskDoneApi:u,taskTotalApi:a}=r(206),{loadWorkersAction:c,taskTotalAction:s,taskDoneAction:f,taskCancelledAction:l}=r(9);e.exports={loadWorkersAsync:async(e,t)=>{try{const t=await o();e(c(t))}catch(e){console.error(e)}},taskTotalAsync:async(e,t)=>{try{const t=await a();e(s(t))}catch(e){console.error(e)}},taskCancelledAsync:async(e,t)=>{try{const t=await i();e(l(t))}catch(e){console.error(e)}},taskDoneAsync:async(e,t)=>{try{const t=await u();e(f(t))}catch(e){console.error(e)}}}},206:(e,t,r)=>{const{client:n}=r(652);e.exports={fetchWorkersApi:async function(){return await n.get("http://localhost:9132/worker/total")},taskCancelledApi:async function(){return await n.get("http://localhost:9132/task/cancelled")},taskDoneApi:async function(){return await n.get("http://localhost:9132/task/done")},taskTotalApi:async function(){return await n.get("http://localhost:9132/task/total")}}},439:e=>{e.exports={initialState:{totalWorker:0,taskDone:0,taskCancelled:0,totalTask:0},workerTotalChange:function(e,t){return e.totalWorker=t.payload,e},taskCancelledChange:function(e,t){return e.taskCancelled=t.payload,e},taskDoneChange:function(e,t){return e.taskDone=t.payload,e},taskTotalChange:function(e,t){return e.totalTask=t.payload,e}}},9:(e,t,r)=>{const{createAction:n,createReducer:o,configureStore:i}=r(819),{initialState:u,workerTotalChange:a,taskCancelledChange:c,taskDoneChange:s,taskTotalChange:f}=r(439),l=r(894),d=n("worker"),p=n("taskTotal"),h=n("taskDone"),y=n("taskCancelled"),b=i({reducer:o(u,{[d]:a,[p]:f,[h]:s,[y]:c}),middleware:[l.default]});e.exports={store$:b,loadWorkersAction:d,taskTotalAction:p,taskDoneAction:h,taskCancelledAction:y}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{r(725);const{store$:e}=r(9),{loadWorkersAsync:t,taskTotalAsync:n,taskCancelledAsync:o,taskDoneAsync:i}=r(514),u=document.getElementById("worker-total"),a=document.getElementById("task-done"),c=document.getElementById("task-undone"),s=document.getElementById("task-cancelled");function f(e){u.innerHTML=e.totalWorker,a.innerHTML=e.taskDone,s.innerHTML=e.taskCancelled;const t=e.totalTask-e.taskCancelled-e.taskDone;c.innerHTML=t}e.subscribe((()=>{f(e.getState())})),f(e.getState()),e.dispatch(t),e.dispatch(n),e.dispatch(o),e.dispatch(i)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,